diff --git a/ReactAndroid/src/main/java/com/facebook/react/fabric/FabricUIManager.java b/ReactAndroid/src/main/java/com/facebook/react/fabric/FabricUIManager.java
index fe2ed4003cff84f7b59b05489578120225562597..bd74626556d4ec9ad43e5b1e488108f2ac33771c 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/fabric/FabricUIManager.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/fabric/FabricUIManager.java
@@ -20,8 +20,10 @@ import static com.facebook.react.uimanager.UIManagerHelper.PADDING_TOP_INDEX;
 import static com.facebook.react.uimanager.common.UIManagerType.FABRIC;
 
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.content.Context;
 import android.graphics.Point;
+import android.graphics.Rect;
 import android.os.SystemClock;
 import android.view.View;
 import android.view.accessibility.AccessibilityEvent;
@@ -48,6 +50,7 @@ import com.facebook.react.bridge.UIManager;
 import com.facebook.react.bridge.UIManagerListener;
 import com.facebook.react.bridge.UiThreadUtil;
 import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.bridge.WritableNativeMap;
 import com.facebook.react.common.annotations.UnstableReactNativeAPI;
 import com.facebook.react.common.build.ReactBuildConfig;
 import com.facebook.react.common.mapbuffer.ReadableMapBuffer;
@@ -860,6 +863,36 @@ public class FabricUIManager
     }
   }
 
+  @SuppressWarnings("unused")
+  @Nullable
+  private NativeMap getDisplaySizes(int surfaceId) {
+    ReactContext context;
+    if (surfaceId > 0) {
+      SurfaceMountingManager surfaceMountingManager =
+        mMountingManager.getSurfaceManagerEnforced(surfaceId, "measure");
+      if (surfaceMountingManager.isStopped()) {
+        return null;
+      }
+      context = surfaceMountingManager.getContext();
+    } else {
+      context = mReactApplicationContext;
+    }
+
+    if (context == null) {
+      return null;
+    }
+
+    Activity activity = context.getCurrentActivity();
+    if (activity == null) {
+      return null;
+    }
+
+    WritableMap sizes = new WritableNativeMap();
+    sizes.putDouble("height", activity.getWindow().getDecorView().getWidth());
+    sizes.putDouble("width", activity.getWindow().getDecorView().getHeight());
+    return (NativeMap) sizes;
+  }
+
   /**
    * This method initiates preloading of an image specified by ImageSource. It can later be consumed
    * by an ImageView.
diff --git a/ReactAndroid/src/main/java/com/facebook/react/fabric/mounting/SurfaceMountingManager.java b/ReactAndroid/src/main/java/com/facebook/react/fabric/mounting/SurfaceMountingManager.java
index 2b53a76c03d492737b87dd5d0bb8a6eb3bccb1b4..a091dc510dc183428c519546d019fb335fe4d125 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/fabric/mounting/SurfaceMountingManager.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/fabric/mounting/SurfaceMountingManager.java
@@ -399,6 +399,7 @@ public class SurfaceMountingManager {
       // thus prevent the RemoveDeleteTree worker from deleting this
       // View in the future.
       if (viewParent instanceof ViewGroup) {
+        ((ViewGroup) viewParent).endViewTransition(view);
         ((ViewGroup) viewParent).removeView(view);
       }
       mErroneouslyReaddedReactTags.add(tag);
diff --git a/ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt b/ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt
index df3d8e98b30f81f6c6a240ac238638945764253b..afc545560917d03b1ffcc21008be199f6958fd99 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt
+++ b/ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt
@@ -11,6 +11,8 @@ import android.animation.Animator
 import android.animation.ValueAnimator
 import android.content.Context
 import android.graphics.Point
+import android.os.Handler
+import android.os.Looper
 import android.view.View
 import android.view.ViewGroup
 import android.widget.OverScroller
@@ -324,6 +326,7 @@ public object ReactScrollViewHelper {
     forceUpdateState(scrollView)
   }
 
+  private val handler = Handler(Looper.getMainLooper())
   @JvmStatic
   public fun <T> forceUpdateState(scrollView: T) where
   T : HasScrollState?,
@@ -338,15 +341,18 @@ public object ReactScrollViewHelper {
       FLog.i(
           TAG, "updateFabricScrollState[%d] scrollX %d scrollY %d", scrollView.id, scrollX, scrollY)
     }
-    val stateWrapper = scrollView.stateWrapper
-    if (stateWrapper != null) {
-      val newStateData: WritableMap = WritableNativeMap()
-      newStateData.putDouble(CONTENT_OFFSET_LEFT, toDIPFromPixel(scrollX.toFloat()).toDouble())
-      newStateData.putDouble(CONTENT_OFFSET_TOP, toDIPFromPixel(scrollY.toFloat()).toDouble())
-      newStateData.putDouble(
-          SCROLL_AWAY_PADDING_TOP, toDIPFromPixel(scrollAwayPaddingTop.toFloat()).toDouble())
-      stateWrapper.updateState(newStateData)
-    }
+    handler.removeCallbacksAndMessages(null)
+    handler.postDelayed({
+      val stateWrapper = scrollView.stateWrapper
+      if (stateWrapper != null) {
+        val newStateData: WritableMap = WritableNativeMap()
+        newStateData.putDouble(CONTENT_OFFSET_LEFT, toDIPFromPixel(scrollX.toFloat()).toDouble())
+        newStateData.putDouble(CONTENT_OFFSET_TOP, toDIPFromPixel(scrollY.toFloat()).toDouble())
+        newStateData.putDouble(
+            SCROLL_AWAY_PADDING_TOP, toDIPFromPixel(scrollAwayPaddingTop.toFloat()).toDouble())
+        stateWrapper.updateState(newStateData)
+      }
+    }, 64)
   }
 
   @JvmStatic
diff --git a/ReactCommon/react/renderer/components/modal/ModalHostViewComponentDescriptor.h b/ReactCommon/react/renderer/components/modal/ModalHostViewComponentDescriptor.h
index 9ecdc54de4cf9095c4bfc0dcbb39d5a908accce2..481a97b2874641ec6286ddfe3bdda1bd4901dc74 100644
--- a/ReactCommon/react/renderer/components/modal/ModalHostViewComponentDescriptor.h
+++ b/ReactCommon/react/renderer/components/modal/ModalHostViewComponentDescriptor.h
@@ -11,6 +11,10 @@
 #include <react/renderer/components/modal/ModalHostViewShadowNode.h>
 #include <react/renderer/core/ConcreteComponentDescriptor.h>
 
+#ifdef ANDROID
+#include <react/jni/ReadableNativeMap.h>
+#endif
+
 namespace facebook::react {
 
 /*
@@ -30,6 +34,25 @@ class ModalHostViewComponentDescriptor final
             *shadowNode.getState())
             .getData();
 
+    #ifdef ANDROID
+    const jni::global_ref<jobject>& fabricUIManager =
+            contextContainer_->at<jni::global_ref<jobject>>("FabricUIManager");
+
+    static auto getDisplaySizes =
+            jni::findClassStatic("com/facebook/react/fabric/FabricUIManager")
+                    ->getMethod<NativeMap::javaobject(jint)>("getDisplaySizes");
+
+    auto sizes = getDisplaySizes(fabricUIManager, -1);
+    if (sizes != nullptr) {
+        auto dynamicMap = cthis(sizes)->consume();
+        auto height = static_cast<Float>(dynamicMap.getDefault("height", 0).getDouble());
+        auto width = static_cast<Float>(dynamicMap.getDefault("width", 0).getDouble());
+
+        auto &modalHostViewShadowNode = dynamic_cast<ModalHostViewShadowNode &>(shadowNode);
+        modalHostViewShadowNode.setScreenSize(width, height);
+    }
+    #endif
+
     layoutableShadowNode.setSize(
         Size{stateData.screenSize.width, stateData.screenSize.height});
     layoutableShadowNode.setPositionType(YGPositionTypeAbsolute);
diff --git a/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.cpp b/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.cpp
index 3598549813afd9a0ed612e9644815bb02d491a71..54a5eb56aeea11a94c84e47deacb920111be601f 100644
--- a/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.cpp
+++ b/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.cpp
@@ -14,4 +14,15 @@ namespace facebook::react {
 
 extern const char ModalHostViewComponentName[] = "ModalHostView";
 
+void ModalHostViewShadowNode::setScreenSize(float width, float height) {
+  ensureUnsealed();
+
+  setStateData(ModalHostViewState{
+      Size{
+          .width =  width,
+          .height =  height
+      }
+  });
+}
+
 } // namespace facebook::react
diff --git a/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.h b/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.h
index 7c832dc0ca515e14ea606aab46f4401d4e13f716..a649dd387d7c7e21d4c78d90508bd73863f9912d 100644
--- a/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.h
+++ b/ReactCommon/react/renderer/components/modal/ModalHostViewShadowNode.h
@@ -32,6 +32,8 @@ class ModalHostViewShadowNode final : public ConcreteViewShadowNode<
     traits.set(ShadowNodeTraits::Trait::RootNodeKind);
     return traits;
   }
+
+  void setScreenSize(float width, float height);
 };
 
 } // namespace facebook::react
diff --git a/ReactCommon/react/renderer/core/ShadowNode.cpp b/ReactCommon/react/renderer/core/ShadowNode.cpp
index d762d8b00d497b577082541cfaf3ebe3c0cfebe4..2d8b3aa004460afea15caa410dd564a3443a1c83 100644
--- a/ReactCommon/react/renderer/core/ShadowNode.cpp
+++ b/ReactCommon/react/renderer/core/ShadowNode.cpp
@@ -372,7 +372,7 @@ ShadowNode::Unshared ShadowNode::cloneTree(
     children[childIndex] = childNode;
 
     childNode = parentNode.clone(
-        {.children = std::make_shared<ShadowNode::ListOfShared>(children)});
+        {.children = std::make_shared<ShadowNode::ListOfShared>(children), .state = parentNode.getState()});
   }
 
   return std::const_pointer_cast<ShadowNode>(childNode);
