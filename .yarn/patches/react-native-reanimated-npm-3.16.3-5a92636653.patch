diff --git a/Common/cpp/reanimated/Fabric/ReanimatedCommitHook.cpp b/Common/cpp/reanimated/Fabric/ReanimatedCommitHook.cpp
index 3faba2b4dcbb4573bde61be11a91470e5f8736d5..89b4c53437ffffc58b0d054331914a2a4cd51651 100644
--- a/Common/cpp/reanimated/Fabric/ReanimatedCommitHook.cpp
+++ b/Common/cpp/reanimated/Fabric/ReanimatedCommitHook.cpp
@@ -70,7 +70,7 @@ RootShadowNode::Unshared ReanimatedCommitHook::shadowTreeWillCommit(
           propsMap[&family].emplace_back(props);
         });
 
-    rootNode = cloneShadowTreeWithNewProps(*rootNode, propsMap);
+    rootNode = cloneShadowTreeWithNewPropsUnmounted(rootNode, propsMap);
 
     // If the commit comes from React Native then pause commits from
     // Reanimated since the ShadowTree to be committed by Reanimated may not
diff --git a/Common/cpp/reanimated/Fabric/ShadowTreeCloner.cpp b/Common/cpp/reanimated/Fabric/ShadowTreeCloner.cpp
index 5795b731241a1c989f398a0b71be956d433211e3..02637a60c6d62a94367f8374d940ea20bd8443f2 100644
--- a/Common/cpp/reanimated/Fabric/ShadowTreeCloner.cpp
+++ b/Common/cpp/reanimated/Fabric/ShadowTreeCloner.cpp
@@ -1,5 +1,6 @@
 #ifdef RCT_NEW_ARCH_ENABLED
 
+#include <react/renderer/core/DynamicPropsUtilities.h>
 #include <reanimated/Fabric/ShadowTreeCloner.h>
 
 #include <ranges>
@@ -7,6 +8,29 @@
 
 namespace reanimated {
 
+ChildrenMap calculateChildrenMap(
+    const RootShadowNode &oldRootNode,
+    const PropsMap &propsMap) {
+  ChildrenMap childrenMap;
+
+  for (auto &[family, _] : propsMap) {
+    const auto ancestors = family->getAncestors(oldRootNode);
+
+    for (const auto &[parentNode, index] :
+         std::ranges::reverse_view(ancestors)) {
+      const auto parentFamily = &parentNode.get().getFamily();
+      auto &affectedChildren = childrenMap[parentFamily];
+
+      if (affectedChildren.contains(index)) {
+        continue;
+      }
+
+      affectedChildren.insert(index);
+    }
+  }
+  return childrenMap;
+}
+
 ShadowNode::Unshared cloneShadowTreeWithNewPropsRecursive(
     const ShadowNode &shadowNode,
     const ChildrenMap &childrenMap,
@@ -43,33 +67,92 @@ ShadowNode::Unshared cloneShadowTreeWithNewPropsRecursive(
   return result;
 }
 
-RootShadowNode::Unshared cloneShadowTreeWithNewProps(
-    const RootShadowNode &oldRootNode,
+ShadowNode::Unshared cloneShadowTreeWithNewPropsUnmountedRecursive(
+    ShadowNode::Shared const &oldShadowNode,
+    const ChildrenMap &childrenMap,
     const PropsMap &propsMap) {
-  ChildrenMap childrenMap;
+  if (oldShadowNode->getHasBeenPromoted()) {
+    return cloneShadowTreeWithNewPropsRecursive(
+        *oldShadowNode, childrenMap, propsMap);
+  }
 
-  for (auto &[family, _] : propsMap) {
-    const auto ancestors = family->getAncestors(oldRootNode);
+  auto shadowNode = std::const_pointer_cast<ShadowNode>(oldShadowNode);
+  auto layoutableShadowNode =
+      std::dynamic_pointer_cast<LayoutableShadowNode>(shadowNode);
+  if (layoutableShadowNode) {
+    layoutableShadowNode->dirtyLayout();
+  }
 
-    for (const auto &[parentNode, index] :
-         std::ranges::reverse_view(ancestors)) {
-      const auto parentFamily = &parentNode.get().getFamily();
-      auto &affectedChildren = childrenMap[parentFamily];
+  const auto family = &shadowNode->getFamily();
+  const auto affectedChildrenIt = childrenMap.find(family);
+  const auto propsIt = propsMap.find(family);
+  auto children = shadowNode->getChildren();
 
-      if (affectedChildren.contains(index)) {
-        continue;
+  if (affectedChildrenIt != childrenMap.end()) {
+    for (const auto index : affectedChildrenIt->second) {
+      auto clone = cloneShadowTreeWithNewPropsUnmountedRecursive(
+          children[index], childrenMap, propsMap);
+      if (clone != children[index]) {
+        shadowNode->replaceChild(*children[index], clone, index);
       }
+    }
+  }
 
-      affectedChildren.insert(index);
+  Props::Shared newProps = nullptr;
+
+  if (propsIt != propsMap.end()) {
+    PropsParserContext propsParserContext{
+        shadowNode->getSurfaceId(), *shadowNode->getContextContainer()};
+    newProps = shadowNode->getProps();
+    for (const auto &props : propsIt->second) {
+      newProps = shadowNode->getComponentDescriptor().cloneProps(
+          propsParserContext, newProps, RawProps(props));
     }
   }
 
+  if (newProps) {
+    auto &props = shadowNode->getProps();
+    auto &mutableProps = const_cast<Props::Shared &>(props);
+
+#ifdef ANDROID
+    auto &newPropsRef = const_cast<Props &>(*newProps);
+    newPropsRef.rawProps = mergeDynamicProps(
+        mutableProps->rawProps,
+        newProps->rawProps,
+        NullValueStrategy::Override);
+#endif
+    mutableProps = newProps;
+    auto layoutableShadowNode =
+        static_pointer_cast<YogaLayoutableShadowNode>(shadowNode);
+    layoutableShadowNode->updateYogaProps();
+  }
+
+  return shadowNode;
+}
+
+RootShadowNode::Unshared cloneShadowTreeWithNewProps(
+    const RootShadowNode &oldRootNode,
+    const PropsMap &propsMap) {
+  auto childrenMap = calculateChildrenMap(oldRootNode, propsMap);
+
   // This cast is safe, because this function returns a clone
   // of the oldRootNode, which is an instance of RootShadowNode
   return std::static_pointer_cast<RootShadowNode>(
       cloneShadowTreeWithNewPropsRecursive(oldRootNode, childrenMap, propsMap));
 }
 
+RootShadowNode::Unshared cloneShadowTreeWithNewPropsUnmounted(
+    RootShadowNode::Unshared const &oldRootNode,
+    const PropsMap &propsMap) {
+  auto childrenMap = calculateChildrenMap(*oldRootNode, propsMap);
+
+  // This cast is safe, because this function returns a clone
+  // of the oldRootNode, which is an instance of RootShadowNode
+  return std::static_pointer_cast<RootShadowNode>(
+      cloneShadowTreeWithNewPropsUnmountedRecursive(
+          oldRootNode, childrenMap, propsMap));
+}
+
 } // namespace reanimated
 
 #endif // RCT_NEW_ARCH_ENABLED
diff --git a/Common/cpp/reanimated/Fabric/ShadowTreeCloner.h b/Common/cpp/reanimated/Fabric/ShadowTreeCloner.h
index e3f9f6d91413e0fb056a1d0a1dd70a619e061a05..8240776d6c51dc8fd4ea12bb0d77bcf3b6a485f5 100644
--- a/Common/cpp/reanimated/Fabric/ShadowTreeCloner.h
+++ b/Common/cpp/reanimated/Fabric/ShadowTreeCloner.h
@@ -24,6 +24,10 @@ RootShadowNode::Unshared cloneShadowTreeWithNewProps(
     const RootShadowNode &oldRootNode,
     const PropsMap &propsMap);
 
+RootShadowNode::Unshared cloneShadowTreeWithNewPropsUnmounted(
+    RootShadowNode::Unshared const &oldRootShadowNode,
+    const PropsMap &propsMap);
+
 } // namespace reanimated
 
 #endif // RCT_NEW_ARCH_ENABLED
